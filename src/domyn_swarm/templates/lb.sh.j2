#!/bin/bash
#SBATCH --account={{ cfg.backend.account }}
{% if cfg.backend.mail_user %}
#SBATCH --mail-type=END,FAIL
#SBATCH --mail-user={{ cfg.backend.mail_user }}
{% endif %}
#SBATCH --qos={{ cfg.backend.qos }}

#SBATCH --exclusive
#SBATCH --job-name={{ job_name }}-lb
#SBATCH --partition={{ cfg.backend.partition }}
#SBATCH --nodes=1
#SBATCH --cpus-per-task={{ cfg.backend.endpoint.cpus_per_task }}
#SBATCH --mem={{ cfg.backend.endpoint.mem }}
#SBATCH --threads-per-core={{ cfg.backend.endpoint.threads_per_core }}
#SBATCH --time={{ cfg.backend.endpoint.wall_time }}
#SBATCH --output={{ swarm_directory }}/logs/endpoint/lb.out
#SBATCH --error={{ swarm_directory }}/logs/endpoint/lb.err

set -eu
REPLICAS={{ replicas }}
HOME_DIR="{{ cfg.backend.home_directory }}"
HOST_DIR="{{ swarm_directory }}"
WAIT_SEC={{ cfg.backend.wait_endpoint_s | default(600) }}
NGINX_IMG={{ cfg.backend.endpoint.nginx_image }}
INSTANCE_NAME="lb_${DEP_JOBID}_${SLURM_JOB_ID}"
PORT={{ cfg.backend.endpoint.port }}


echo "[lb] waiting for $REPLICAS head files from job $DEP_JOBID"

t0=$(date +%s)
files=()
while true; do
    # TODO: Update correct path
    files=( $(ls "$HOST_DIR/serving/"*".head" 2>/dev/null || true) )
    {% raw %}
    if (( ${#files[@]} == REPLICAS )); then
        break
    fi
    {% endraw %}
    if (( $(date +%s) - t0 > WAIT_SEC )); then
    {% raw %}
        echo "[lb] timeout: only ${#files[@]}/$REPLICAS replicas became healthy" >&2
    {% endraw %}
        exit 1
    fi
    sleep 5
done

echo "[lb] all replicas ready → ${files[*]}"

upstreams=""
for f in "${files[@]}"; do
    addr=$(cat "$f")
    upstreams+="    server $addr;\n"
done


{
    echo "pid /tmp/nginx.pid;"
    echo "events { worker_connections 100000; }"
    echo "http {"
    echo "  upstream llm {"
    echo "    least_conn;"
    for f in "${files[@]}"; do
        addr=$(<"$f")                    # faster cat
        echo "    server $addr max_fails=2 fail_timeout=10s;"
    done
    echo "  }"

    {% if cfg.backend.requires_ray %}
    # TODO: support multiple ray heads
    ray_host=$(sed -n '1s/:.*//p' "$HOST_DIR/serving/replica-0.head")
    echo "  upstream ray {"
    echo "    server $ray_host:{{ cfg.backend.ray_dashboard_port }};"
    echo "    keepalive 8;"
    echo "  }"

    echo "  upstream ray_control {"
    echo "    server $ray_host:{{ cfg.backend.ray_port }};"
    echo "    keepalive 8;"
    echo "  }"
    {% endif %}

    cat <<CONF
  server {
    listen $PORT;
    location / {
      proxy_pass http://llm;
      proxy_connect_timeout       {{ cfg.backend.endpoint.nginx_timeout }};
      proxy_send_timeout          {{ cfg.backend.endpoint.nginx_timeout }};
      proxy_read_timeout          {{ cfg.backend.endpoint.nginx_timeout }};
      send_timeout                {{ cfg.backend.endpoint.nginx_timeout }};
      proxy_set_header Connection "";
      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      {% if cfg.backend.endpoint.enable_proxy_buffering %}
      # ───── Proxy Response Buffering ─────
      proxy_buffer_size 64k;
      proxy_buffers 16 512k;
      proxy_busy_buffers_size 1m;
      proxy_max_temp_file_size 0;
      # ───── Client Request Buffering ─────
      client_max_body_size 50m;
      client_body_buffer_size 1m;
      {% else %}
      proxy_buffering off;
      proxy_request_buffering off;
      {% endif %}

      proxy_next_upstream error timeout http_502 http_504;
      proxy_next_upstream_tries 3;
    }
    location = /health {
      proxy_pass http://llm/health;
      proxy_connect_timeout 2s;
      proxy_read_timeout 2s;
      proxy_cache_bypass \$http_upgrade;
    }
    {% if cfg.backend.requires_ray %}
    location ^~ /ray/ {
      proxy_pass              http://ray/;
      proxy_read_timeout      300s;
      proxy_connect_timeout   60s;
      proxy_set_header Host   \$host;
      proxy_set_header X-Real-IP \$remote_addr;
    }
    location = /ray/dashboard {
      return 301 /ray/dashboard/;
    }
    {% endif %}
  }
}
CONF
} > $HOST_DIR/serving/nginx.conf

CACHE_DIR="$TMPDIR/cache"
mkdir -p "$CACHE_DIR"

singularity instance start --writable-tmpfs \
    -B "$HOST_DIR/serving/nginx.conf":/etc/nginx/nginx.conf:ro \
    -B "$CACHE_DIR":/var/cache/nginx \
    -B "$HOST_DIR/logs/endpoint:/var/log/nginx" \
    "$NGINX_IMG" "$INSTANCE_NAME"

trap 'echo "[batch] caught SIGTERM → shutting down"; exit 0' SIGTERM

while true; do
    sleep 60
done
